/*
#include <stdlib.h>
*/
import "C"

//export winrt_{{.Name}}_QueryInterface
func winrt_{{.Name}}_QueryInterface(instancePtr, iidPtr unsafe.Pointer, ppvObject *unsafe.Pointer) uintptr {
	// Checkout these sources for more information about the QueryInterface method.
	//   - https://docs.microsoft.com/en-us/cpp/atl/queryinterface
	//   - https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)

	if ppvObject == nil {
		// If ppvObject (the address) is nullptr, then this method returns E_POINTER.
		return ole.E_POINTER
	}

	// This function must adhere to the QueryInterface defined here:
	// https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nn-unknwn-iunknown
	iid := (*ole.GUID)(iidPtr)
	instance := (*{{.Name}})(instancePtr)
	if ole.IsEqualGUID(iid, &instance.IID) || ole.IsEqualGUID(iid, ole.IID_IUnknown) || ole.IsEqualGUID(iid, ole.IID_IInspectable){
		*ppvObject = unsafe.Pointer(instance)
	} else {
		*ppvObject = nil
		// Return E_NOINTERFACE if the interface is not supported
		return ole.E_NOINTERFACE
	}


	// If the COM object implements the interface, then it returns
	// a pointer to that interface after calling IUnknown::AddRef on it.
	(*ole.IUnknown)(*ppvObject).AddRef()

	// Return S_OK if the interface is supported
	return ole.S_OK
}

//export winrt_{{.Name}}_Invoke
func winrt_{{.Name}}_Invoke(instancePtr unsafe.Pointer {{range .InParams -}}
		,
		{{- if .Type.IsEnum -}}
			{{.GoVarName}}Raw {{.Type.UnderlyingEnumType}}
		{{- else -}}
			{{.GoVarName}}Ptr unsafe.Pointer
		{{- end}}
	{{- end -}}) uintptr {
	// See the quote above.
	instance := (*{{.Name}})(instancePtr)
	{{range .InParams -}}
		{{if .Type.IsEnum -}}
			{{.GoVarName}} := ({{template "variabletype.tmpl" . }})({{.GoVarName}}Raw)
		{{else -}}
			{{.GoVarName}} := ({{template "variabletype.tmpl" . }})({{.GoVarName}}Ptr)
		{{end -}}
	{{end -}}
	if callback, ok := callbacks{{.Name}}[instancePtr]; ok {
		callback(instance, {{range .InParams}}{{.GoVarName}},{{end}})
	}
	return ole.S_OK
}

//export winrt_{{.Name}}_AddRef
func winrt_{{.Name}}_AddRef(instancePtr unsafe.Pointer) int64 {
	instance := (*{{.Name}})(instancePtr)
	return instance.addRef()
}

//export winrt_{{.Name}}_Release
func winrt_{{.Name}}_Release(instancePtr unsafe.Pointer) int64 {
	instance := (*{{.Name}})(instancePtr)
	rem := instance.removeRef()
	if rem <= 0 {
		// We're done.
		callbacks{{.Name}}Lock.Lock()
		delete(callbacks{{.Name}}, instancePtr)
		callbacks{{.Name}}Lock.Unlock()
		C.free(instancePtr)
	}
	return rem
}
